from .base import Encoding
from .glyph_list import GlyphList

class ZapfDingbatsEncoding(Encoding):
    def __init__(self):
        super().__init__()
        # Use built-in ZapfDingbats font's encoding.
        # General speaking, ZapfDingbats font's built-in encoding should be as
        # same as PDF reference D.6
        # By the way, there is no PDF encoding named ZapfDingbatsEncoding.
        self.encoding_name = "StandardEncoding"
        self.code_to_name = {
            0o040: "space",
            0o041: "a1",
            0o042: "a2",
            0o043: "a202",
            0o044: "a3",
            0o045: "a4",
            0o046: "a5",
            0o047: "a119",
            0o050: "a118",
            0o051: "a117",
            0o052: "a11",
            0o053: "a12",
            0o054: "a13",
            0o055: "a14",
            0o056: "a15",
            0o057: "a16",
            0o060: "a105",
            0o061: "a17",
            0o062: "a18",
            0o063: "a19",
            0o064: "a20",
            0o065: "a21",
            0o066: "a22",
            0o067: "a23",
            0o070: "a24",
            0o071: "a25",
            0o072: "a26",
            0o073: "a27",
            0o074: "a28",
            0o075: "a6",
            0o076: "a7",
            0o077: "a8",
            0o100: "a9",
            0o101: "a10",
            0o102: "a29",
            0o103: "a30",
            0o104: "a31",
            0o105: "a32",
            0o106: "a33",
            0o107: "a34",
            0o110: "a35",
            0o111: "a36",
            0o112: "a37",
            0o113: "a38",
            0o114: "a39",
            0o115: "a40",
            0o116: "a41",
            0o117: "a42",
            0o120: "a43",
            0o121: "a44",
            0o122: "a45",
            0o123: "a46",
            0o124: "a47",
            0o125: "a48",
            0o126: "a49",
            0o127: "a50",
            0o130: "a51",
            0o131: "a52",
            0o132: "a53",
            0o133: "a54",
            0o134: "a55",
            0o135: "a56",
            0o136: "a57",
            0o137: "a58",
            0o140: "a59",
            0o141: "a60",
            0o142: "a61",
            0o143: "a62",
            0o144: "a63",
            0o145: "a64",
            0o146: "a65",
            0o147: "a66",
            0o150: "a67",
            0o151: "a68",
            0o152: "a69",
            0o153: "a70",
            0o154: "a71",
            0o155: "a72",
            0o156: "a73",
            0o157: "a74",
            0o160: "a203",
            0o161: "a75",
            0o162: "a204",
            0o163: "a76",
            0o164: "a77",
            0o165: "a78",
            0o166: "a79",
            0o167: "a81",
            0o170: "a82",
            0o171: "a83",
            0o172: "a84",
            0o173: "a97",
            0o174: "a98",
            0o175: "a99",
            0o176: "a100",
            0o241: "a101",
            0o242: "a102",
            0o243: "a103",
            0o244: "a104",
            0o245: "a106",
            0o246: "a107",
            0o247: "a108",
            0o250: "a112",
            0o251: "a111",
            0o252: "a110",
            0o253: "a109",
            0o254: "a120",
            0o255: "a121",
            0o256: "a122",
            0o257: "a123",
            0o260: "a124",
            0o261: "a125",
            0o262: "a126",
            0o263: "a127",
            0o264: "a128",
            0o265: "a129",
            0o266: "a130",
            0o267: "a131",
            0o270: "a132",
            0o271: "a133",
            0o272: "a134",
            0o273: "a135",
            0o274: "a136",
            0o275: "a137",
            0o276: "a138",
            0o277: "a139",
            0o300: "a140",
            0o301: "a141",
            0o302: "a142",
            0o303: "a143",
            0o304: "a144",
            0o305: "a145",
            0o306: "a146",
            0o307: "a147",
            0o310: "a148",
            0o311: "a149",
            0o312: "a150",
            0o313: "a151",
            0o314: "a152",
            0o315: "a153",
            0o316: "a154",
            0o317: "a155",
            0o320: "a156",
            0o321: "a157",
            0o322: "a158",
            0o323: "a159",
            0o324: "a160",
            0o325: "a161",
            0o326: "a163",
            0o327: "a164",
            0o330: "a196",
            0o331: "a165",
            0o332: "a192",
            0o333: "a166",
            0o334: "a167",
            0o335: "a168",
            0o336: "a169",
            0o337: "a170",
            0o340: "a171",
            0o341: "a172",
            0o342: "a173",
            0o343: "a162",
            0o344: "a174",
            0o345: "a175",
            0o346: "a176",
            0o347: "a177",
            0o350: "a178",
            0o351: "a179",
            0o352: "a193",
            0o353: "a180",
            0o354: "a199",
            0o355: "a181",
            0o356: "a200",
            0o357: "a182",
            0o361: "a201",
            0o362: "a183",
            0o363: "a184",
            0o364: "a197",
            0o365: "a185",
            0o366: "a194",
            0o367: "a198",
            0o370: "a186",
            0o371: "a195",
            0o372: "a187",
            0o373: "a188",
            0o374: "a189",
            0o375: "a190",
            0o376: "a191",
        }

    def unicode(self, code):
        """The ZapfDingbats font uses a special glyph list, so we need to specialize this method.
        """
        return GlyphList.name_to_unicode(self.name(code), zapf=True)

    def code_from_unicode(self, unicode):
        """The ZapfDingbats font uses a special glyph list, so we need to specialize this method.
        """
        return self.code(GlyphList.unicode_to_name(unicode, zapf=True))
